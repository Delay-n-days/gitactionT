name: Build and Release HelloWorld (ARM64)

on:
  push:
    branches: [ main ]

permissions:
  contents: write
  
jobs:
  build-arm64:
    runs-on: windows-latest  # 使用 Windows 环境，配置ARM64交叉编译

    steps:
    # 1. 检出代码
    - name: Checkout code
      uses: actions/checkout@v4

    # 2. 缓存 MSYS2 环境
    - name: Cache MSYS2
      uses: actions/cache@v3
      with:
        path: |
          C:\msys64\home\runneradmin\.ccache
          C:\msys64\mingw64
        key: ${{ runner.os }}-msys2-arm64-${{ hashFiles('.github/workflows/build-arm64.yml') }}
        restore-keys: |
          ${{ runner.os }}-msys2-arm64-

    # 3. 设置 CMake 和 ARM64 交叉编译工具链
    - name: Setup CMake and ARM64 Toolchain
      uses: msys2/setup-msys2@v2
      with:
        update: true
        install: "cmake make gcc-arm-none-eabi mingw-w64-clang-aarch64-clang"

    # 4. 缓存 CMake 构建文件
    - name: Cache CMake Build
      uses: actions/cache@v3
      with:
        path: build-arm64
        key: ${{ runner.os }}-cmake-arm64-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-cmake-arm64-

    # 5. 创建 ARM64 构建目录
    - name: Create Build Directory
      run: mkdir -Force build-arm64

    # 6. 配置 CMake (ARM64 交叉编译)
    - name: Configure CMake for ARM64
      run: cmake -B build-arm64 -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=cmake/toolchain-arm64.cmake

    # 7. 编译项目 (ARM64)
    - name: Build Project for ARM64
      run: cmake --build build-arm64 --config Release

    # 8. 列出生成的文件（用于调试）
    - name: List Artifacts
      run: Get-ChildItem build-arm64/Release/ -ErrorAction SilentlyContinue | Format-List

    # 9. 创建或获取发布版本
    - name: Get or Create Release
      id: get_release
      uses: actions/github-script@v7
      with:
        script: |
          const tag = `v${{ github.run_number }}`;
          try {
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: tag,
            });
            core.setOutput('upload_url', release.data.upload_url);
            core.setOutput('release_id', release.data.id);
          } catch (error) {
            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tag,
              name: `Release ${tag}`,
              draft: false,
              prerelease: false,
            });
            core.setOutput('upload_url', release.data.upload_url);
            core.setOutput('release_id', release.data.id);
          }

    # 10. 上传 ARM64 可执行文件到发布版本
    - name: Upload ARM64 Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: build-arm64/Release/hello-world.exe
        asset_name: hello-world-arm64.exe
        asset_content_type: application/octet-stream
      continue-on-error: true
