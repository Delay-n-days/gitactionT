name: Build and Release HelloWorld (ARM64)

on:
  push:
    branches: [ main ]

permissions:
  contents: write
  
jobs:
  build-arm64:
    runs-on: ubuntu-latest  # 使用 Linux 环境编译 ARM64

    steps:
    # 1. 检出代码
    - name: Checkout code
      uses: actions/checkout@v4

    # 2. 安装 ARM64 交叉编译工具链
    - name: Install ARM64 Build Tools
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake make gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

    # 3. 缓存编译文件
    - name: Cache Build Files
      uses: actions/cache@v3
      with:
        path: build-arm64
        key: ${{ runner.os }}-cmake-arm64-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-cmake-arm64-

    # 4. 创建 ARM64 构建目录
    - name: Create Build Directory
      run: mkdir -p build-arm64

    # 5. 配置 CMake (ARM64 交叉编译)
    - name: Configure CMake for ARM64
      run: cmake -B build-arm64 -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=cmake/toolchain-arm64.cmake

    # 6. 编译项目 (ARM64)
    - name: Build Project for ARM64
      run: cmake --build build-arm64 --config Release

    # 7. 列出生成的文件（用于调试）
    - name: List Artifacts
      run: ls -la build-arm64/Release/ 2>/dev/null || echo "Build directory empty"

    # 8. 创建或获取发布版本
    - name: Get or Create Release
      id: get_release
      uses: actions/github-script@v7
      with:
        script: |
          const tag = `v${{ github.run_number }}`;
          try {
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: tag,
            });
            core.setOutput('upload_url', release.data.upload_url);
            core.setOutput('release_id', release.data.id);
          } catch (error) {
            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tag,
              name: `Release ${tag}`,
              draft: false,
              prerelease: false,
            });
            core.setOutput('upload_url', release.data.upload_url);
            core.setOutput('release_id', release.data.id);
          }

    # 9. 上传 ARM64 可执行文件到发布版本
    - name: Upload ARM64 Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: build-arm64/Release/hello-world
        asset_name: hello-world-arm64
        asset_content_type: application/octet-stream
      continue-on-error: true
